{"ast":null,"code":"class Api {\n  constructor(options) {\n    this._options = options;\n  }\n  _checkResponse(res) {\n    if (res.ok) {\n      return res.json();\n    }\n    return Promise.reject(`Ошибка: ${res.status}`);\n  }\n  getUserInfo() {\n    return fetch(`${this._options.baseUrl}/users/me`, {\n      headers: this._options.headers\n    }).then(this._checkResponse);\n  }\n  getInitialCards() {\n    return fetch(`${this._options.baseUrl}/cards`, {\n      headers: this._options.headers\n    }).then(this._checkResponse);\n  }\n  setUserInfo(name, about) {\n    return fetch(`${this._options.baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: this._options.headers,\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._checkResponse);\n  }\n  generateCard(mesto, link) {\n    return fetch(`${this._options.baseUrl}/cards`, {\n      method: 'POST',\n      headers: this._options.headers,\n      body: JSON.stringify({\n        name: mesto,\n        link: link\n      })\n    }).then(this._checkResponse);\n  }\n  deleteCard(id) {\n    return fetch(`${this._options.baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: this._options.headers\n    }).then(this._checkResponse);\n  }\n  likeCard(id) {\n    return fetch(`${this._options.baseUrl}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: this._options.headers\n    }).then(this._checkResponse);\n  }\n  deleteLikeCard(id) {\n    return fetch(`${this._options.baseUrl}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: this._options.headers\n    }).then(this._checkResponse);\n  }\n  addAvatar(avatar) {\n    return fetch(`${this._options.baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: this._options.headers,\n      body: JSON.stringify({\n        avatar: avatar\n      })\n    }).then(this._checkResponse);\n  }\n}\nconst api = new Api({\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-72',\n  headers: {\n    authorization: '9430b557-5691-4068-a9d3-25e6e6adc7cd',\n    'Content-Type': 'application/json'\n  }\n});\nexport { api };\nexport { Api };","map":{"version":3,"names":["Api","constructor","options","_options","_checkResponse","res","ok","json","Promise","reject","status","getUserInfo","fetch","baseUrl","headers","then","getInitialCards","setUserInfo","name","about","method","body","JSON","stringify","generateCard","mesto","link","deleteCard","id","likeCard","deleteLikeCard","addAvatar","avatar","api","authorization"],"sources":["C:/Users/user/mesto-react/mesto-react/src/utils/Api.js"],"sourcesContent":["class Api {\r\n  constructor(options) {\r\n    this._options = options;\r\n  }\r\n  _checkResponse(res) {\r\n    if (res.ok) {return res.json()}\r\n    return Promise.reject(`Ошибка: ${res.status}`);\r\n  }\r\n\r\n  getUserInfo() {\r\n    return fetch(`${this._options.baseUrl}/users/me`, {\r\n      headers: this._options.headers\r\n    }).then(this._checkResponse)\r\n  }\r\n\r\n  getInitialCards() {\r\n    return fetch(`${this._options.baseUrl}/cards`, {\r\n      headers: this._options.headers\r\n    }).then(this._checkResponse)\r\n  }\r\n  \r\n  setUserInfo(name, about) {\r\n    return fetch(`${this._options.baseUrl}/users/me`, {\r\n      method: 'PATCH',\r\n      headers: this._options.headers,\r\n      body: JSON.stringify({\r\n        name: name,\r\n        about: about\r\n      }),\r\n    }).then(this._checkResponse)\r\n  }\r\n\r\n  generateCard(mesto, link) {\r\n    return fetch(`${this._options.baseUrl}/cards`, {\r\n      method: 'POST',\r\n      headers: this._options.headers,\r\n      body: JSON.stringify({\r\n        name: mesto,\r\n        link: link\r\n      }),\r\n    }).then(this._checkResponse)\r\n  }\r\n\r\n  deleteCard(id) {\r\n    return fetch(`${this._options.baseUrl}/cards/${id}`, {\r\n      method: 'DELETE',\r\n      headers: this._options.headers\r\n    }).then(this._checkResponse)\r\n  }\r\n\r\n  likeCard(id) {\r\n    return fetch(`${this._options.baseUrl}/cards/${id}/likes`, {\r\n      method: 'PUT',\r\n      headers: this._options.headers\r\n    }).then(this._checkResponse)\r\n  }\r\n\r\n  deleteLikeCard(id) {\r\n    return fetch(`${this._options.baseUrl}/cards/${id}/likes`, {\r\n      method: 'DELETE',\r\n      headers: this._options.headers\r\n    }).then(this._checkResponse)\r\n  }\r\n\r\n  addAvatar(avatar) {\r\n    return fetch(`${this._options.baseUrl}/users/me/avatar`, {\r\n      method: 'PATCH',\r\n      headers: this._options.headers,\r\n      body: JSON.stringify({\r\n        avatar: avatar\r\n      }),\r\n    }).then(this._checkResponse)\r\n  }\r\n}\r\nconst api = new Api({\r\n  baseUrl: 'https://mesto.nomoreparties.co/v1/cohort-72',\r\n  headers: {\r\n    authorization: '9430b557-5691-4068-a9d3-25e6e6adc7cd',\r\n    'Content-Type': 'application/json'\r\n  }\r\n});\r\n\r\nexport {api};\r\nexport {Api};\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}